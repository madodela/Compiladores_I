TKN_PROGRAM	program
TKN_LBRACE	{
TKN_INT	int
TKN_ID	x
TKN_COMMA	,
TKN_ID	y
TKN_SEMICOLON	;
TKN_BOOL	bool
TKN_ID	d
TKN_SEMICOLON	;
TKN_FLOAT	float
TKN_ID	a
TKN_COMMA	,
TKN_ID	b
TKN_COMMA	,
TKN_ID	c
TKN_COMMA	,
TKN_ID	d
TKN_COMMA	,
TKN_ID	e
TKN_SEMICOLON	;
TKN_ID	x
TKN_ASSIGN	=
TKN_NUM	0
TKN_SEMICOLON	;
TKN_COMMENT	/// comentario 1
TKN_ID	y
TKN_ASSIGN	=
TKN_NUM	4
TKN_SEMICOLON	;
TKN_MLCOMMENT	/** comentario 2 */
TKN_DO	do
TKN_LBRACE	{
TKN_WHILE	while
TKN_LPARENT	(
TKN_ID	x
TKN_LETHAN	<=
TKN_LPARENT	(
TKN_NUM	5
TKN_ADD	+
TKN_NUM	4
TKN_RPARENT	)
TKN_RPARENT	)
TKN_LBRACE	{
TKN_READ	read
TKN_ID	y
TKN_SEMICOLON	;
TKN_WRITE	write
TKN_ID	x
TKN_ADD	+
TKN_NUM	5
TKN_SEMICOLON	;
TKN_ID	x
TKN_ASSIGN	=
TKN_ID	x
TKN_PRODUCT	*
TKN_NUM	10
TKN_MINUS	-
TKN_NUM	5
TKN_ADD	+
TKN_NUM	2
TKN_DIVISION	/
TKN_NUM	1
TKN_PRODUCT	*
TKN_NUM	2
TKN_SEMICOLON	;
TKN_RBRACE	}
TKN_ID	a
TKN_ASSIGN	=
TKN_ID	a
TKN_PRODUCT	*
TKN_LPARENT	(
TKN_ID	x
TKN_ADD	+
TKN_LPARENT	(
TKN_NUM	1
TKN_PRODUCT	*
TKN_NUM	2
TKN_RPARENT	)
TKN_RPARENT	)
TKN_SEMICOLON	;
TKN_IF	if
TKN_LPARENT	(
TKN_ID	x
TKN_LTHAN	<
TKN_ID	y
TKN_RPARENT	)
TKN_LBRACE	{
TKN_ID	y
TKN_ASSIGN	=
TKN_ID	y
TKN_MINUS	-
TKN_NUM	1
TKN_ADD	+
TKN_NUM	2
TKN_ADD	+
TKN_NUM	3
TKN_MINUS	-
TKN_NUM	5
TKN_PRODUCT	*
TKN_NUM	2
TKN_DIVISION	/
TKN_NUM	3
TKN_SEMICOLON	;
TKN_IF	if
TKN_LPARENT	(
TKN_NUM	5
TKN_NEQUAL	!=
TKN_NUM	3
TKN_RPARENT	)
TKN_LBRACE	{
TKN_ID	d
TKN_ASSIGN	=
TKN_ID	true
TKN_SEMICOLON	;
TKN_RBRACE	}
TKN_ELSE	else
TKN_LBRACE	{
TKN_ID	d
TKN_ASSIGN	=
TKN_ID	false
TKN_SEMICOLON	;
TKN_LBRACE	{
TKN_ID	x
TKN_ASSIGN	=
TKN_NUM	4
TKN_DIVISION	/
TKN_NUM	1
TKN_PRODUCT	*
TKN_NUM	3
TKN_DIVISION	/
TKN_ID	y
TKN_PRODUCT	*
TKN_NUM	5
TKN_SEMICOLON	;
TKN_RBRACE	}
TKN_RBRACE	}
TKN_FI	fi
TKN_RBRACE	}
TKN_FI	fi
TKN_RBRACE	}
TKN_UNTIL	until
TKN_LPARENT	(
TKN_ID	y
TKN_GETHAN	>=
TKN_NUM	0
TKN_RPARENT	)
TKN_SEMICOLON	;
TKN_RBRACE	}
TKN_EOF	$
